//
//     Generated by class-dump 3.5 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//
//  Build 2022-10-30 xybp888 Dump.
//  

#import <MediaRemote/MRExternalDevice.h>

@class MISSING_TYPE, MRAVOutputContext, MRAVOutputDevice, MRDOriginForwarder, MRDeviceInfo, MROrigin, MROutputContextController, NSArray, NSMutableArray, NSMutableSet, NSObject, NSString;
@protocol OS_dispatch_queue;

@interface MRDAVOutputContextExternalDevice : MRExternalDevice
{
    unsigned int _connectionState;
    MRDeviceInfo *_deviceInfo;
    MRDOriginForwarder *_originForwarder;
    NSMutableArray *_pendingCommitRequests;
    MROutputContextController *_outputContextController;
    NSMutableSet *_clientBundleIDs;
    NSArray *subscribedPlayerPaths;
    MRAVOutputDevice *_designatedGroupLeader;
    MRAVOutputContext *_outputContext;
    MROrigin *_origin;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSObject<OS_dispatch_queue> *_workerQueue;
    NSObject<OS_dispatch_queue> *_notificationQueue;
    CDUnknownBlockType _connectionStateCallback;
    NSObject<OS_dispatch_queue> *_connectionStateCallbackQueue;
    CDUnknownBlockType _outputDevicesUpdatedCallback;
    NSObject<OS_dispatch_queue> *_outputDevicesUpdatedCallbackQueue;
    CDUnknownBlockType _outputDevicesRemovedCallback;
    NSObject<OS_dispatch_queue> *_outputDevicesRemovedCallbackQueue;
    CDUnknownBlockType _volumeCallback;
    NSObject<OS_dispatch_queue> *_volumeCallbackQueue;
    CDUnknownBlockType _volumeControlCapabilitiesCallback;
    NSObject<OS_dispatch_queue> *_volumeControlCapabilitiesCallbackQueue;
}

+ (id)_resolveReason:(id)arg1 uid:(id)arg2 name:(id)arg3 requestID:(id)arg4;
+ (void)_createPlayerForClient:(id)arg1 playerPath:(id)arg2 deviceInfo:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (void)_createPlayerAndWaitForCanBeNowPlaying:(id)arg1 deviceInfo:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (void)_createPlayerAndWaitForConnection:(id)arg1 command:(id)arg2 deviceInfo:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (void)_sendCommandPreview:(unsigned int)arg1 options:(id)arg2 playerPath:(id)arg3;
+ (void)prewarmApp:(id)arg1 origin:(id)arg2 deviceInfo:(id)arg3;
+ (void)initialPrewarm;
+ (void)initialize;
- (void).cxx_destruct;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *volumeControlCapabilitiesCallbackQueue; // @synthesize volumeControlCapabilitiesCallbackQueue=_volumeControlCapabilitiesCallbackQueue;
@property(copy, nonatomic) CDUnknownBlockType volumeControlCapabilitiesCallback; // @synthesize volumeControlCapabilitiesCallback=_volumeControlCapabilitiesCallback;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *volumeCallbackQueue; // @synthesize volumeCallbackQueue=_volumeCallbackQueue;
@property(copy, nonatomic) CDUnknownBlockType volumeCallback; // @synthesize volumeCallback=_volumeCallback;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *outputDevicesRemovedCallbackQueue; // @synthesize outputDevicesRemovedCallbackQueue=_outputDevicesRemovedCallbackQueue;
@property(copy, nonatomic) CDUnknownBlockType outputDevicesRemovedCallback; // @synthesize outputDevicesRemovedCallback=_outputDevicesRemovedCallback;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *outputDevicesUpdatedCallbackQueue; // @synthesize outputDevicesUpdatedCallbackQueue=_outputDevicesUpdatedCallbackQueue;
@property(copy, nonatomic) CDUnknownBlockType outputDevicesUpdatedCallback; // @synthesize outputDevicesUpdatedCallback=_outputDevicesUpdatedCallback;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *connectionStateCallbackQueue; // @synthesize connectionStateCallbackQueue=_connectionStateCallbackQueue;
@property(copy, nonatomic) CDUnknownBlockType connectionStateCallback; // @synthesize connectionStateCallback=_connectionStateCallback;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *notificationQueue; // @synthesize notificationQueue=_notificationQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *workerQueue; // @synthesize workerQueue=_workerQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) MROrigin *origin; // @synthesize origin=_origin;
@property(retain, nonatomic) MRAVOutputContext *outputContext; // @synthesize outputContext=_outputContext;
@property(retain, nonatomic) MRAVOutputDevice *designatedGroupLeader; // @synthesize designatedGroupLeader=_designatedGroupLeader;
- (void)setSubscribedPlayerPaths:(id)arg1;
- (id)subscribedPlayerPaths;
- (_Bool)verifyCreatedPlayerPath:(id)arg1 forClient:(id)arg2 error:(id *)arg3;
- (void)destroyPlayersForClient:(id)arg1 origin:(id)arg2;
- (void)_onQueue_destroyPlayerPathsForOrigin:(id)arg1;
- (MISSING_TYPE *)_resolveReason: /* Error: Ran out of types for this method. */;
- (void)_maybeForwardOriginToLocalOrigin:(id)arg1;
- (void)commitOutputDeviceToContextIfNeededWithReason:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)outputDeviceForUID:(id)arg1 error:(id *)arg2;
- (_Bool)verifyGroupLeader:(id)arg1;
- (void)verifyGroupLeaderForReason:(id)arg1;
- (void)cleanUp;
- (void)_reevaluateDeviceInfo;
- (void)clusterController:(id)arg1 clusterTypeDidChange:(unsigned int)arg2;
- (void)localClusterTypeDidChangeNotification:(id)arg1;
- (void)anyDeviceInfoDidChangeNotification:(id)arg1;
- (void)_notifyActiveSessionMaybeWillBeHijackedByNativePlaybackFromOutputContextModification:(id)arg1;
- (void)outputContextDidAddLocalDeviceNotification:(id)arg1;
- (void)outputContextRequestToAddLocalOutputDeviceNotification:(id)arg1;
- (void)anyOutputContextDidAddOutputDeviceNotification:(id)arg1;
- (void)outputContextDataSourceVolumeDidChangeNotification:(id)arg1;
- (void)outputContextDataSourceVolumeControlCapabilitiesDidChangeNotification:(id)arg1;
- (void)outputContextDataSourceDidRemoveOutputDeviceNotification:(id)arg1;
- (void)outputContextDataSourceDidAddOutputDeviceNotification:(id)arg1;
- (void)outputContextDataSourceOutputDeviceDidChangeNotification:(id)arg1;
- (void)outputContextDataSourceOutputDevicesDidChangeNotification:(id)arg1;
- (void)registerForNotifications;
- (void)sendClientUpdatesConfigMessage;
- (id)currentClientUpdatesConfigMessage;
- (id)errorForCurrentState;
- (void)sendButtonEvent:(struct _MRHIDButtonEvent)arg1;
- (void)setWantsSystemEndpointNotifications:(_Bool)arg1;
- (_Bool)wantsSystemEndpointNotifications;
- (void)setWantsOutputDeviceNotifications:(_Bool)arg1;
- (_Bool)wantsOutputDeviceNotifications;
- (void)setWantsVolumeNotifications:(_Bool)arg1;
- (_Bool)wantsVolumeNotifications;
- (void)setWantsNowPlayingArtworkNotifications:(_Bool)arg1;
- (_Bool)wantsNowPlayingArtworkNotifications;
- (void)setWantsNowPlayingNotifications:(_Bool)arg1;
- (_Bool)wantsNowPlayingNotifications;
- (_Bool)isUsingSystemPairing;
- (_Bool)isPaired;
- (void)sendCustomData:(id)arg1 withName:(id)arg2;
- (void)setCustomDataCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (void)setNameCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (id)supportedMessages;
- (void)removeFromParentGroup:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setPairingAllowedCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (void)setPairingCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (void)unpair;
- (void)disconnect:(id)arg1;
- (id)_generateDeviceInfoWithDesignatedGroupLeader:(id)arg1 outputContext:(id)arg2;
- (void)connectWithOptions:(unsigned int)arg1 clientBundleIdentifier:(id)arg2 userInfo:(id)arg3;
- (void)ping:(double)arg1 callback:(CDUnknownBlockType)arg2 withQueue:(id)arg3;
- (void)modifyByAddingDeviceUIDs:(id)arg1 removingDeviceUIDs:(id)arg2 settingDeviceUIDs:(id)arg3 addingClusterAwareDeviceUIDs:(id)arg4 removingClusterAwareDeviceUIDs:(id)arg5 settingClusterAwareDeviceUIDs:(id)arg6 withReplyQueue:(id)arg7 completion:(CDUnknownBlockType)arg8;
- (void)outputDeviceVolumeControlCapabilities:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setOutputDeviceVolume:(float)arg1 outputDeviceUID:(id)arg2 queue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)outputDeviceVolume:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setConnectionStateCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (void)setOutputDevicesRemovedCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (void)setOutputDevicesUpdatedCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (void)setVolumeControlCapabilitiesCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (void)setVolumeChangedCallback:(CDUnknownBlockType)arg1 withQueue:(id)arg2;
- (void)_handlePlaybackSessionMigrateEndRequest:(id)arg1 error:(id)arg2 forPlayerPath:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_handlePlaybackSessionMigrateBeginRequest:(id)arg1 forPlayerPath:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_handlePlaybackSessionMigrateRequest:(id)arg1 request:(id)arg2 forPlayerPath:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_handlePlaybackSessionRequest:(id)arg1 forPlayerPath:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_handlePlaybackQueueRequest:(id)arg1 forPlayerPath:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_sendMessageForPlayerPath:(id)arg1 timeout:(double)arg2 reason:(id)arg3 factory:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;
- (void)sendMessageWithType:(unsigned long long)arg1 playerPath:(id)arg2 timeout:(double)arg3 reason:(id)arg4 factory:(CDUnknownBlockType)arg5 completion:(CDUnknownBlockType)arg6;
- (void)_createPlayerAndWaitForCanBeNowPlaying:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_createPlayerAndWaitForConnection:(id)arg1 command:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)_createResolvedPlayerPathFromPlayerPath:(id)arg1;
- (void)_handleRemoteCommand:(unsigned int)arg1 withOptions:(id)arg2 playerPath:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setDeviceInfo:(id)arg1;
- (id)uid;
- (void)setConnectionState:(unsigned int)arg1;
- (unsigned int)connectionState;
- (id)deviceInfo;
- (id)customOrigin;
- (_Bool)supportsIdleDisconnection;
- (long long)port;
- (id)hostName;
- (id)name;
@property(readonly, nonatomic) _Bool containsLocalDevice;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
- (id)dictionaryRepresentation;
- (void)dealloc;
- (id)initWithOutputContext:(id)arg1 designatedGroupLeader:(id)arg2;

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

