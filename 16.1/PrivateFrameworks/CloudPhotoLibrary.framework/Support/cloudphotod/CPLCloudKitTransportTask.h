//
//     Generated by class-dump 3.5 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//
//  Build 2022-10-30 xybp888 Dump.
//  

#import <objc/NSObject.h>

@class CKOperationGroup, CKRecordID, CPLCloudKitTransportTaskFetchCache, CPLSyncSession, CPLTransportScopeMapping, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSProgress, NSString;
@protocol CPLCloudKitActivityRequest, CPLCloudKitTaskController, CPLCloudKitTransportTaskGate, CPLEngineStoreUserIdentifier, CPLEngineTransportGroup, OS_dispatch_queue, OS_xpc_object;

@interface CPLCloudKitTransportTask : NSObject
{
    NSMutableArray *_currentOperations;
    NSMutableArray *_lastOperationRequestUUIDs;
    NSMutableDictionary *_cachedScopes;
    NSMutableDictionary *_cacheScopeIdentifiersPerZoneID;
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _mustCallTaskDidFinish;
    unsigned long long _nonCKOperationCount;
    _Bool _foregroundHasBeenChanged;
    _Bool _hasProgress;
    NSProgress *_progress;
    NSObject<OS_dispatch_queue> *_progressQueue;
    NSMutableSet *_associatedMetrics;
    id <CPLCloudKitActivityRequest> _activityRequest;
    NSObject<OS_xpc_object> *_activity;
    _Bool _cancelled;
    NSProgress *_callbackOperationProgress;
    struct _xpc_activity_eligibility_changed_handler_s *_activityEligibilityChangeHandler;
    _Bool _highPriorityBackground;
    _Bool _forcedTask;
    _Bool _backgroundTask;
    _Bool _allowsFetchCache;
    _Bool _foreground;
    _Bool _allowsCellular;
    _Bool _boostable;
    _Bool _isUpload;
    _Bool _isMetadata;
    id <CPLEngineStoreUserIdentifier> _transportUserIdentifier;
    id <CPLEngineTransportGroup> _transportGroup;
    id trackingContext;
    id <CPLCloudKitTaskController> _controller;
    id <CPLCloudKitTransportTaskGate> _gate;
    CPLSyncSession *_session;
    CPLCloudKitTransportTaskFetchCache *_fetchCache;
    NSString *_sourceBundleIdentifier;
    double _timeoutIntervalForRequest;
    double _timeoutIntervalForResource;
    NSString *_idleDescription;
    CPLTransportScopeMapping *_transportScopeMapping;
}

+ (_Bool)allowsCellularForDownloadOperationOfSize:(unsigned long long)arg1 isForeground:(_Bool)arg2 isHighPriority:(_Bool)arg3;
+ (_Bool)allowsCellularForDownloadOperationOfResource:(id)arg1 isForeground:(_Bool)arg2 isHighPriority:(_Bool)arg3;
+ (void)initialize;
+ (id)reverseMappingForMoveSteps;
+ (id)mappingForMoveSteps;
+ (void)setMoveStepFaultInjector:(CDUnknownBlockType)arg1;
+ (CDUnknownBlockType)moveStepFaultInjector;
+ (id)copiedRecordFromSourceRecord:(id)arg1 sourceDatabaseScope:(long long)arg2 toRecordID:(id)arg3 helper:(id)arg4 action:(id)arg5 error:(id *)arg6;
- (void).cxx_destruct;
@property(retain, nonatomic) CPLTransportScopeMapping *transportScopeMapping; // @synthesize transportScopeMapping=_transportScopeMapping;
@property(copy) NSString *idleDescription; // @synthesize idleDescription=_idleDescription;
@property(nonatomic) _Bool isMetadata; // @synthesize isMetadata=_isMetadata;
@property(nonatomic) _Bool isUpload; // @synthesize isUpload=_isUpload;
@property(readonly, nonatomic) double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property(readonly, nonatomic) double timeoutIntervalForRequest; // @synthesize timeoutIntervalForRequest=_timeoutIntervalForRequest;
@property(nonatomic, getter=isBoostable) _Bool boostable; // @synthesize boostable=_boostable;
@property(nonatomic) _Bool allowsCellular; // @synthesize allowsCellular=_allowsCellular;
@property(copy, nonatomic) NSString *sourceBundleIdentifier; // @synthesize sourceBundleIdentifier=_sourceBundleIdentifier;
@property(retain, nonatomic) CPLCloudKitTransportTaskFetchCache *fetchCache; // @synthesize fetchCache=_fetchCache;
@property(readonly, nonatomic) CPLSyncSession *session; // @synthesize session=_session;
@property(retain, nonatomic) id <CPLCloudKitTransportTaskGate> gate; // @synthesize gate=_gate;
@property(readonly, nonatomic) id <CPLCloudKitTaskController> controller; // @synthesize controller=_controller;
@property(retain, nonatomic) id trackingContext; // @synthesize trackingContext;
@property(nonatomic) _Bool allowsFetchCache; // @synthesize allowsFetchCache=_allowsFetchCache;
@property(nonatomic, getter=isBackgroundTask) _Bool backgroundTask; // @synthesize backgroundTask=_backgroundTask;
@property(nonatomic, getter=isForcedTask) _Bool forcedTask; // @synthesize forcedTask=_forcedTask;
@property(nonatomic, getter=isHighPriorityBackground) _Bool highPriorityBackground; // @synthesize highPriorityBackground=_highPriorityBackground;
@property(retain, nonatomic) id <CPLEngineTransportGroup> transportGroup; // @synthesize transportGroup=_transportGroup;
@property(retain, nonatomic) id <CPLEngineStoreUserIdentifier> transportUserIdentifier; // @synthesize transportUserIdentifier=_transportUserIdentifier;
- (id)rejectedScopedIdentifierForRejectedCKRecordID:(id)arg1;
- (id)scopedIdentifierForCKRecordID:(id)arg1;
- (id)scopeIdentifierFromZoneID:(id)arg1;
- (id)_scopeIdentifierFromZoneID:(id)arg1;
- (id)zoneIDFromScopeIdentifier:(id)arg1;
@property(copy, nonatomic) NSDictionary *transportScopes;
- (id)cloudKitScopeForScopeIdentifier:(id)arg1;
- (void)enumerateAllZonesWithBlock:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_enumerateAllZonesForSharedDatabase:(_Bool)arg1 block:(CDUnknownBlockType)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchUserRecordIDFetchWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getUserRecordIDFetchIfNecessaryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)_stringForNetworkBehavior:(unsigned long long)arg1;
- (id)_stringForQoS:(long long)arg1;
- (id)_statusForConfiguration:(id)arg1;
- (id)baseConfigurationForTask;
- (void)setupConfigurationForOperation:(id)arg1;
- (unsigned long long)_networkBehavior;
- (void)runOperations;
- (void)processErrorIfNeeded:(id)arg1;
- (void)popTaskOperation;
- (void)pushTaskOperation;
- (void)taskDidFinish;
- (void)operationDidFinish:(id)arg1 error:(id)arg2;
- (void)updateContextWithBlock:(CDUnknownBlockType)arg1 forOperation:(id)arg2;
- (void)updateProgress:(double)arg1 forOperation:(id)arg2;
- (void)updateOneBatchForOperation:(id)arg1;
- (void)associateMetric:(id)arg1;
@property(readonly, nonatomic) NSArray *lastOperationRequestUUIDs;
- (id)callbackOperationDidFinishWithError:(id)arg1;
- (void)dispatchCallbackOperation:(id)arg1 progress:(id)arg2;
- (void)_cancelCallbackProgress;
- (void)operationDidFinishWithError:(id)arg1;
- (void)updateContextWithBlock:(CDUnknownBlockType)arg1;
- (void)updateProgress:(double)arg1;
- (void)updateOneBatch;
- (void)launchOperation:(id)arg1 type:(long long)arg2 withContext:(id)arg3 sourceBundleIdentifiers:(id)arg4;
- (void)launchOperation:(id)arg1 type:(long long)arg2 withContext:(id)arg3;
// Error: Property attributes should begin with the type ('T') attribute, property name: currentOperation
// Property attributes: (null)

- (_Bool)shouldRunOperationsWithError:(id *)arg1;
- (void)dispatchAfter:(double)arg1 block:(CDUnknownBlockType)arg2;
- (void)dispatchAsync:(CDUnknownBlockType)arg1;
- (void)cancelIfBlocked;
- (void)_cancelAllOperationsIfBlocked;
- (void)cancel;
- (void)runWithinSyncSession:(id)arg1;
- (void)runWithNoSyncSession;
- (void)_runWithSyncSession:(id)arg1;
- (void)_acquireActivityOfTypeAndLaunchOperation:(long long)arg1;
- (void)_reallyStartOperation;
@property(nonatomic) _Bool foreground; // @synthesize foreground=_foreground;
@property(readonly, nonatomic) CKOperationGroup *operationGroup;
@property(readonly, nonatomic) CKRecordID *currentUserID;
- (id)initWithController:(id)arg1;
- (id)finalizedDestinationCKRecordFromProposedCKRecord:(id)arg1 error:(id *)arg2;
- (id)recordNameInDestinationCKRecordFromRecordName:(id)arg1 error:(id *)arg2;
- (_Bool)shouldCopyCKRecordKeyToDestinationCKRecord:(id)arg1;
- (id)baseDestinationCKRecordForSourceCKRecord:(id)arg1 destinationCKRecordID:(id)arg2 error:(id *)arg3;
- (void)prepareCopyForCKRecordID:(id)arg1 fromCKRecord:(id)arg2;
- (_Bool)shouldCopyForCKRecordID:(id)arg1 fromCKRecord:(id)arg2;
- (void)moveRecordsWithIDs:(id)arg1 followRemapping:(_Bool)arg2 sourceType:(long long)arg3 destinationRecordIDs:(id)arg4 destinationType:(long long)arg5 helper:(id)arg6 finalizeMoveChanges:(CDUnknownBlockType)arg7 completionHandler:(CDUnknownBlockType)arg8;
- (void)moveRecordsWithIDs:(id)arg1 followRemapping:(_Bool)arg2 sourceType:(long long)arg3 destinationRecordIDs:(id)arg4 destinationType:(long long)arg5 helper:(id)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (id)_moveChangesFromSourceRecords:(id)arg1 recordIDs:(id)arg2 sourceType:(long long)arg3 destinationRecordIDs:(id)arg4 helper:(id)arg5 sourceRecordIDs:(id *)arg6 operationContext:(id)arg7 error:(id *)arg8;
- (void)_applyMoveChanges:(id)arg1 sourceType:(long long)arg2 destinationType:(long long)arg3 helper:(id)arg4 operationContext:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)copyRecordsWithIDs:(id)arg1 sourceType:(long long)arg2 destinationRecordIDs:(id)arg3 destinationType:(long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)copyRecordsWithIDs:(id)arg1 followRemapping:(_Bool)arg2 sourceType:(long long)arg3 destinationRecordIDs:(id)arg4 destinationType:(long long)arg5 helper:(id)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (void)uploadDestinationRecords:(id)arg1 destinationType:(long long)arg2 scopeProvider:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_uploadDestinationRecords:(id)arg1 destinationType:(long long)arg2 scopeProvider:(id)arg3 operationContext:(id)arg4 uploadAction:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (id)_destinationRecordsFromSourceRecords:(id)arg1 recordIDs:(id)arg2 sourceType:(long long)arg3 destinationRecordIDs:(id)arg4 helper:(id)arg5 sourceRecordIDs:(id *)arg6 operationContext:(id)arg7 action:(id)arg8 error:(id *)arg9;
- (void)updateRecords:(id)arg1 cloudKitScope:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)_errorForUpdateError:(id)arg1;
- (void)fetchRecordsFollowRemappingWithIDs:(id)arg1 wantsAllRecords:(_Bool)arg2 type:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_fetchRecordsFollowRemappingWithIDs:(id)arg1 recordIDsToOriginalRecordIDs:(id)arg2 alreadySeen:(id)arg3 wantsAllRecords:(_Bool)arg4 type:(long long)arg5 storeRequestUUIDsIn:(id)arg6 addToResult:(id)arg7 completionHandler:(CDUnknownBlockType)arg8;
- (void)fetchZoneForScope:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_fetchZoneForZoneID:(id)arg1 operationType:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchPlaceholderRecordsForScopedIdentifiers:(id)arg1 targetMapping:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchUnknownTargetsInMapping:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fetchFullRecordsForScopedIdentifiers:(id)arg1 targetMapping:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_fetchRecordsForRemainingScopedIdentifiers:(id)arg1 alreadyFetchedScopedIdentifiers:(id)arg2 userRecordID:(id)arg3 foundCPLRecords:(id)arg4 foundCKRecords:(id)arg5 targetMapping:(id)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (_Bool)_mergeFoundCKRecords:(id)arg1 updateFoundCPLRecords:(id)arg2 remainingScopedIdentifiers:(id)arg3 fetchedScopedIdentifiers:(id)arg4 userRecordID:(id)arg5 targetMapping:(id)arg6 error:(id *)arg7;
- (void)_mergePrivateRecord:(id)arg1 withSharedRecord:(id)arg2 merger:(id)arg3;
- (id)_sharedRecordToPrivateRecord:(id)arg1 scopedIdentifier:(id)arg2;
- (id)_interpretedSharedChangeFromCKRecord:(id)arg1 scopedIdentifier:(id)arg2 userRecordID:(id)arg3;
- (id)_interpretedChangeFromCKRecord:(id)arg1 scopedIdentifier:(id)arg2 userRecordID:(id)arg3;
- (void)fetchRecordWithScopedIdentifiers:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_fetchRecordWithScopedIdentifiers:(id)arg1 followRemapping:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_fetchNextOperationType:(id)arg1 followRemapping:(_Bool)arg2 recordIDMapping:(id)arg3 inResult:(id)arg4 storeRequestUUIDsIn:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)fetchRecordWithNames:(id)arg1 inScope:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchRecordsWithIDs:(id)arg1 fetchResources:(_Bool)arg2 inScope:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)fetchRecordWithNames:(id)arg1 fetchResources:(_Bool)arg2 inScope:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)fetchRecordsWithIDs:(id)arg1 fetchResources:(_Bool)arg2 wantsAllRecords:(_Bool)arg3 type:(long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)_fetchRecordsWithIDs:(id)arg1 fetchResources:(_Bool)arg2 desiredKeys:(id)arg3 wantsAllRecords:(_Bool)arg4 type:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

