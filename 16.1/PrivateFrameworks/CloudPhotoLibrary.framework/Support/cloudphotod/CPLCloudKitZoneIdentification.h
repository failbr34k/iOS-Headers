//
//     Generated by class-dump 3.5 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//
//  Build 2022-10-30 xybp888 Dump.
//  

#import <objc/NSObject.h>

@class CKRecordID, CKRecordZone, CKRecordZoneID, CKReference, CPLCloudKitScope, CPLEngineScope, MISSING_TYPE, NSString;

@interface CPLCloudKitZoneIdentification : NSObject
{
    _Bool _hasCachedRootRef;
    CKReference *_cachedRootRef;
    CPLCloudKitScope *_cloudKitScope;
    CPLEngineScope *_engineScope;
}

+ (_Bool)isScopeReadonlyFromCKShare:(id)arg1;
+ (long long)_permissionFromCKShare:(id)arg1;
+ (id)prefixForNewScopes;
+ (id)libraryInfoRecordName;
+ (_Bool)isSupportedShare:(id)arg1;
+ (_Bool)isSupportedShareType:(id)arg1;
+ (id)shareType;
+ (id)shareRecordName;
+ (id)rootRecordName;
+ (_Bool)supportsCloudKitScope:(id)arg1 engineScope:(id)arg2;
+ (long long)scopeTypeForCloudKitScope:(id)arg1 proposedScopeType:(long long)arg2 fetchedRecords:(id)arg3 currentUserID:(id)arg4;
+ (id)recordsToFetchToIdentifyZoneID:(id)arg1 proposedScopeType:(long long)arg2 currentUserID:(id)arg3;
+ (id)recordNamesForScopeInfo;
+ (_Bool)shouldProtectZoneIDFromDeletion:(id)arg1;
- (void).cxx_destruct;
@property(readonly, nonatomic) CPLEngineScope *engineScope; // @synthesize engineScope=_engineScope;
@property(readonly, nonatomic) CPLCloudKitScope *cloudKitScope; // @synthesize cloudKitScope=_cloudKitScope;
- (MISSING_TYPE *)_isScopeReadonlyFromCKShare: /* Error: Ran out of types for this method. */;
- (id)newScopeIdentifier;
- (void)validateCreateScopeTask:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)validateAcceptSharedScopeTask:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) long long scopeType;
@property(readonly, nonatomic) NSString *scopeIdentifier;
@property(readonly, nonatomic) CKRecordZone *zone;
@property(readonly, nonatomic) CKRecordZoneID *zoneID;
- (id)scopedIdentifierWithIdentifier:(id)arg1;
- (id)recordIDWithRecordName:(id)arg1;
- (_Bool)supportsDeletionOfRecordClass:(Class)arg1;
- (_Bool)supportsDirectDeletionOfRecordClass:(Class)arg1;
- (_Bool)supportsDownloadOfRecordClass:(Class)arg1;
- (_Bool)supportsUploadOfRecordClass:(Class)arg1;
- (_Bool)supportsDeletionOfRecord:(id)arg1;
- (_Bool)supportsDirectDeletionOfRecord:(id)arg1;
- (_Bool)supportsDownloadOfChange:(id)arg1;
- (_Bool)supportsUploadOfChange:(id)arg1;
- (void)setupRootOnRecord:(id)arg1;
@property(readonly, nonatomic) long long databaseScope;
@property(readonly, nonatomic) long long operationType;
- (id)_rootRef;
@property(readonly, nonatomic) NSString *libraryInfoRecordName;
@property(readonly, nonatomic) NSString *shareType;
@property(readonly, nonatomic) NSString *shareRecordName;
@property(readonly, nonatomic) NSString *rootRecordType;
@property(readonly, nonatomic) CKRecordID *rootRecordID;
- (id)proposedStagingZoneIdentificationWithCurrentUserID:(id)arg1;
- (_Bool)isSupportedShare:(id)arg1;
- (_Bool)isSupportedShareType:(id)arg1;
- (id)updatedFlagsFromDeletedCKRecordID:(id)arg1 recordType:(id)arg2;
- (id)updatedScopeChangeFromScopeChange:(id)arg1 currentUserID:(id)arg2 withDeletedCKRecordID:(id)arg3 recordType:(id)arg4;
- (id)updatedFlagsFromCKRecord:(id)arg1;
- (id)scopeFlagsUpdateFromCKRecords:(id)arg1;
- (id)updatedScopeChangeFromScopeChange:(id)arg1 currentUserID:(id)arg2 withCKRecord:(id)arg3;
- (id)scopeChangeFromCKRecords:(id)arg1 currentUserID:(id)arg2 previousScopeChange:(id)arg3;
- (id)_baseScopeChange;
- (id)recordsToUpdateFromScopeChange:(id)arg1 currentUserID:(id)arg2;
@property(readonly, nonatomic) CKRecordID *shareRecordIDToDelete;
@property(readonly, nonatomic) _Bool supportsZoneCreation;
@property(readonly, nonatomic) _Bool supportsZoneDelete;
- (id)recordsToFetchForScopeInfoWithCurrentUserID:(id)arg1;
- (id)initWithCloudKitScope:(id)arg1 engineScope:(id)arg2;

@end

