//
//     Generated by class-dump 3.5 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//
//  Build 2022-10-30 xybp888 Dump.
//  

#import <objc/NSObject.h>

@class DRDispatchTimer, DRKeyboardArbiter, DRLockObserver, DRSystemConnection, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSXPCListener;
@protocol DRDragSessionManagerDelegate, OS_dispatch_queue;

@interface DRDragSessionManager : NSObject
{
    unsigned int _lastSessionIdentifier;
    id <DRDragSessionManagerDelegate> _delegate;
    NSMutableArray *_dragSessions;
    NSHashTable *_keyboardSessions;
    NSObject<OS_dispatch_queue> *_xpcQueue;
    NSXPCListener *_sourceListener;
    NSXPCListener *_destinationListener;
    DRSystemConnection *_systemConnection;
    DRKeyboardArbiter *_keyboardArbiter;
    DRLockObserver *_lockObserver;
    NSMutableDictionary *_touchStreamsByDisplayIdentifier;
    DRDispatchTimer *_pointerWatchdogTimer;
    NSMutableDictionary *_pointerServiceAssertionsByDisplayIdentifier;
    NSObject<OS_dispatch_queue> *_transformUpdateQueue;
}

+ (id)sharedSessionManager;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *transformUpdateQueue; // @synthesize transformUpdateQueue=_transformUpdateQueue;
@property(readonly, nonatomic) NSMutableDictionary *pointerServiceAssertionsByDisplayIdentifier; // @synthesize pointerServiceAssertionsByDisplayIdentifier=_pointerServiceAssertionsByDisplayIdentifier;
@property(readonly, nonatomic) DRDispatchTimer *pointerWatchdogTimer; // @synthesize pointerWatchdogTimer=_pointerWatchdogTimer;
@property(readonly, nonatomic) NSMutableDictionary *touchStreamsByDisplayIdentifier; // @synthesize touchStreamsByDisplayIdentifier=_touchStreamsByDisplayIdentifier;
@property(readonly, nonatomic) DRLockObserver *lockObserver; // @synthesize lockObserver=_lockObserver;
@property(readonly, nonatomic) DRKeyboardArbiter *keyboardArbiter; // @synthesize keyboardArbiter=_keyboardArbiter;
@property(readonly, nonatomic) DRSystemConnection *systemConnection; // @synthesize systemConnection=_systemConnection;
@property(readonly, nonatomic) NSXPCListener *destinationListener; // @synthesize destinationListener=_destinationListener;
@property(readonly, nonatomic) NSXPCListener *sourceListener; // @synthesize sourceListener=_sourceListener;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *xpcQueue; // @synthesize xpcQueue=_xpcQueue;
@property(readonly, nonatomic) NSHashTable *keyboardSessions; // @synthesize keyboardSessions=_keyboardSessions;
@property(readonly, nonatomic) unsigned int lastSessionIdentifier; // @synthesize lastSessionIdentifier=_lastSessionIdentifier;
@property(readonly, nonatomic) NSMutableArray *dragSessions; // @synthesize dragSessions=_dragSessions;
@property(nonatomic) __weak id <DRDragSessionManagerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_getTransformForContextID:(unsigned int)arg1 layerRenderID:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)_addBeginningTouchesToExistingSessions:(id)arg1 viewController:(id)arg2 touchWindow:(id)arg3;
- (id)_filterTouchesForPointer:(id)arg1 performingBlockForPointerTouch:(CDUnknownBlockType)arg2;
- (void)_forEachTouch:(id)arg1 performBlockForSession:(CDUnknownBlockType)arg2;
- (void)_cancelAllDragSessions;
- (void)touchTrackingWindow:(id)arg1 touchesCancelled:(id)arg2;
- (void)touchTrackingWindow:(id)arg1 touchesEnded:(id)arg2 pairedWithVelocities:(id)arg3;
- (void)touchTrackingWindow:(id)arg1 touchesMoved:(id)arg2;
- (void)touchTrackingWindow:(id)arg1 touchesBegan:(id)arg2;
- (void)dragSession:(id)arg1 enableKeyboardIfNeeded:(_Bool)arg2;
- (void)dragSessionDidEnd:(id)arg1;
- (void)dragSessionWillEnd:(id)arg1;
- (void)dragSessionAnimateOutVisibleItems:(id)arg1;
- (void)dragSession:(id)arg1 moveToLocation:(struct CGPoint)arg2;
- (void)dragSession:(id)arg1 removeVisibleDroppedItemsInSpaceOfContextID:(unsigned int)arg2 layerRenderID:(unsigned long long)arg3 replyingOnQueue:(id)arg4 with:(CDUnknownBlockType)arg5;
- (void)dragSession:(id)arg1 findVisibleDroppedItemsReplyingOnQueue:(id)arg2 with:(CDUnknownBlockType)arg3;
- (_Bool)dragSession:(id)arg1 destinationIsSystemConnection:(int)arg2;
- (void)resetDestinationClientForDragSession:(id)arg1;
- (void)dragSession:(id)arg1 updatedPotentialDrop:(id)arg2 forDestinationClient:(id)arg3;
- (void)dragSession:(id)arg1 addedItemCount:(unsigned long long)arg2;
- (void)dragSession:(id)arg1 invalidateImageForClient:(id)arg2 itemIndex:(unsigned long long)arg3;
- (void)dragSession:(id)arg1 updateDragItems:(id)arg2 forClient:(id)arg3 withFence:(id)arg4;
- (id)windowForDisplayIdentifier:(id)arg1;
- (id)allWindowContextIdsForDragSession:(id)arg1;
- (oneway void)sawFirstDragEventWithSessionID:(unsigned int)arg1 systemPolicy:(_Bool)arg2 destination:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)teardownPortalViewsForDragSessionOriginatingFromViewController:(id)arg1;
- (void)configurePortalViewsForDragSessionOriginatingFromViewController:(id)arg1;
- (oneway void)beginDragWithClientSession:(id)arg1 configuration:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (oneway void)warmUp;
- (void)_pointerBeganWatchdogFired;
- (void)_cancelPointerBeganWatchdog;
- (id)xpcQueue_pointerDragSessionForEvents;
- (_Bool)xpcQueue_hasTouchBasedDragSessionForEventsForDisplayIdentifier:(id)arg1;
- (id)xpcQueue_accessibilityDragSessionForEvents;
- (void)xpcQueue_validateTouchStreamForDragSession:(id)arg1;
- (void)xpcQueue_removeDragSession:(id)arg1;
- (void)xpcQueue_addDragSession:(id)arg1;
- (void)xpcQueue_acceptNewDestinationConnection:(id)arg1;
- (_Bool)xpcQueue_shouldAcceptNewDestinationConnection:(id)arg1;
- (_Bool)xpcQueue_canAcceptDestinationConnection:(id)arg1;
- (void)xpcQueue_acceptNewSourceConnection:(id)arg1;
- (_Bool)xpcQueue_shouldAcceptNewSourceConnection:(id)arg1;
- (_Bool)xpcQueue_canCreateNewDragSessionWithSourceConnection:(id)arg1;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)requestImagesForSessionID:(unsigned int)arg1 client:(id)arg2 itemIndexSet:(id)arg3;
- (void)startup;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

